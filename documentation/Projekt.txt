Aufgabenstellung:

Bei dem "Cat Mouse Cheese" Projekt gibt es zwei Roboter: eine Katze und eine Maus. Desweiteren befindet sich ein Stück Käse auf dem Spielfeld.
Ziel der Katze ist es die Maus zu fangen und zu verhindern, dass die Maus den Käse bekommt.
Die Maus muss dementsprechend der Katze ausweichen und zum Käse kommen.

Das Spiel gilt als beendet, sobald
    a) Die Katze die Maus gefangen hat                     => Die Katze siegt
    b) Die Maus kommt zum Käse                             => Die Maus siegt
    c) Nach einer gewissen Zeit tritt weder a) noch b) ein => Unentschieden
    
In diesem Projekt wurde die Rolle der Katze übernommen.

Maps und Roboter:

Bei den verwendeten Robotern handelt es sich jeweils um einen Turtlebot3 Burger.
Dieser Roboter hat eine maximale Lineargeschwindigkeit von 0.22 m/s und eine maximale Winkelgeschwindigkeit von 2.84 rad/s.(1)
Um Hindernisse zu erkennen, besitzt er einen Laserscanner mit einer Scanreichweite von 120 ~ 3500mm und einer Auflösung von 1°.(2)

Für das Spiel gibt es jedoch Restriktionen der Roboter bezüglich Linear- und Winkelgeschwindigkeit.

Katze:
    Lineargeschwindigkeit: konstant 0.22 m/s
    Winkelgeschwindigkeit: -0.8 ... 0.8 rad/s

Maus:
    Lineargeschwindigkeit: konstant 0.18 m/s
    Winkelgeschwindigkeit: -2.84 .. 2.84 rad/s

Das  Spiel findet auf 3 unterschiedlichen Maps statt:

Hier Bild Welt1

In dieser Welt gibt es viele Hindernisse, weshalb es für den Roboter schwer ist sich darin kollisionsfrei zu bewegen.
Durch die viel langsamere Winkelgeschwindigkeit kann die Maus die Katze dort leicher ausmanövrieren.

Hier Bild von Welt2

Welt 2 hat weniger Hindernisse, als die erste Welt, weshalb die Kollisionsvermeidung dort für beide Roboter leichter ist, die Katze aber trotzdem
noch ausmanövriert werden kann.

Hier Bild Welt3

In dieser Welt gibt es bis auf den Käse und den gegnerischen Roboter keine Hindernisse. Daher müsste die Katze durch ihre größere Lineargeschwindigkeit
im Vorteil sein.

Mögliche Implementierungsmöglichkeiten:

Für das Projekt gibt es keine Vorgaben, wie man das Verhalten des eigenen Roboters implementieren muss, 
im Laufe des Semester wurden jedoch verschiedene Methoden in der Vorlesung vorgestellt.

Kraftbasierte Kollisionsvermeidung und Homing:
    Bei diesen Verfahren wird bei der Kollisionsvermeidung eine Kraft simuliert, die von den Hindernissen auf den Roboter wirken und ihn um so mehr abstoßen, 
    je näher er an einem Hindernis ist.
    Beim Homing erfährt der Roboter eine Anziehungskraft auf einen Punkt im Spielfeld.
    Durch das Zusammenaddieren beider Kräfte, dem Homing und der Kollisionsvermeidung, ergibt sich eine neue Kraft, die den Roboter von
    Hindernissen abstößt ihn jedoch gleichzeitig immer näher zum Ziel treibt
    
Sense Plan Act:
    Hier wird für jede Folge von möglichen Zusatänden der maximale nutzen berechnet, der Roboter arbeit somit vorrausschauend.
    Dabei entsteht ein Suchbaum. Dieser Suchbaum kann mit dem MinMax-Algorithmus in diesem Spielfall optimiert werden.
    
Optimal Control:
    Während bei MinMax die addierten Kosten minimiert oder der addierte Reward maximiert wird, werden bei optimal control
    die integrierten Kosten minimiert.
    
Path Planning:
    Durch eine gegebene Umgebungkarte versucht der Roboter den kürzesten Weg zu seinem Ziel zu berechnen.
    Um das zu erreichen wird die Karte beispielsweise mit einem Occupancy grid in Zellen zerlegt 
    und mit einem Shortest Path Algorithmus wie dem A*-Algorithmus die kürzeste Distanz von Start-Ziel berechnet.
            
Zielsetzung:

Die Katze soll allen Hindernissen ausweichen und die Maus fangen, bevor diese den Käse erreicht.
Um diese Ziel zu erreichen wird eine kraftbasierte Kollisionsvermeidung und Homing verwendet.
Um die Maus tatsächlich zu fangen, muss die Kollisionsvermeidung für die Maus jedeoch deaktiviert werden, Kollisionen mit anderen Hindernissen
müssen jedoch auch weiterhin vermieden werden.

Mit einer State Machine wird verhindert, dass die Maus die Katze ausmanövriert und zum Käse kommt.

Quellen:

(1)https://emanual.robotis.com/docs/en/platform/turtlebot3/specifications/#hardware-specifications
(2)https://emanual.robotis.com/docs/en/platform/turtlebot3/appendix_lds_01/
